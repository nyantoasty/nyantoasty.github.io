// Firestore Security Rules for Enhanced Progress Tracking
// DEVELOPMENT RULES with Enhanced Progress Support

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Roles collection - read only for authenticated users
    match /roles/{roleId} {
      allow read: if request.auth != null;
    }
    
    // Pattern access control
    match /patterns/{patternId} {
      // Allow read if user has access OR pattern is public OR user is creator
      allow read: if request.auth != null && (
        hasPatternAccess(patternId, request.auth.uid) ||
        resource.data.visibility == 'public' ||
        resource.data.createdBy == request.auth.uid
      );
      
      // Allow write if user is creator OR has edit permission
      allow write: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        hasPatternPermission(patternId, request.auth.uid, 'edit')
      );
      
      // Allow create if authenticated
      allow create: if request.auth != null;
    }
    
    // ENHANCED PROGRESS TRACKING RULES
    match /user_pattern_progress/{progressId} {
      // Progress document ID format: {userId}_{patternId}_{projectId}
      // Only allow access if the progress belongs to the current user
      allow read, write: if request.auth != null && 
        progressId.split('_')[0] == request.auth.uid;
      
      // Allow create if authenticated and the progress document is for the current user
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Validate data structure on write
      allow write: if request.auth != null && 
        progressId.split('_')[0] == request.auth.uid &&
        validateProgressData(request.resource.data);
    }
    
    // Pattern access records
    match /pattern_access/{accessId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.grantedBy == request.auth.uid
      );
      
      allow write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Pattern shares
    match /pattern_shares/{shareId} {
      allow read, write: if request.auth != null && (
        resource.data.sharedBy == request.auth.uid ||
        resource.data.sharedWith == request.auth.uid
      );
      allow create: if request.auth != null;
    }
    
    // Analytics collections - allow authenticated users to write
    match /stitch_finder_queries/{queryId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    match /navigation_events/{eventId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    match /generator_events/{eventId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Helper functions
    function hasPatternAccess(patternId, userId) {
      return exists(/databases/$(database)/documents/pattern_access/$(patternId + '_' + userId));
    }
    
    function hasPatternPermission(patternId, userId, permission) {
      let accessDoc = get(/databases/$(database)/documents/pattern_access/$(patternId + '_' + userId));
      return accessDoc.data.permission == permission || accessDoc.data.permission == 'admin';
    }
    
    // Validate progress data structure
    function validateProgressData(data) {
      return data.keys().hasAll(['userId', 'patternId', 'projectId']) &&
        data.userId is string &&
        data.patternId is string &&
        data.projectId is string &&
        (
          !('currentStep' in data) || 
          (data.currentStep is number && data.currentStep >= 1)
        ) &&
        (
          !('status' in data) || 
          data.status in ['not_started', 'in_progress', 'paused', 'completed', 'abandoned']
        ) &&
        (
          !('privacy' in data) || 
          (data.privacy is map && validatePrivacySettings(data.privacy))
        ) &&
        (
          !('images' in data) || 
          (data.images is list && validateImageArray(data.images))
        );
    }
    
    // Validate privacy settings
    function validatePrivacySettings(privacy) {
      return (
        !('shareProgress' in privacy) || privacy.shareProgress is bool
      ) &&
      (
        !('shareLocation' in privacy) || privacy.shareLocation is bool
      ) &&
      (
        !('sharePhotos' in privacy) || privacy.sharePhotos is bool
      ) &&
      (
        !('profileVisibility' in privacy) || 
        privacy.profileVisibility in ['public', 'friends', 'private']
      );
    }
    
    // Validate image array structure
    function validateImageArray(images) {
      return images.size() <= 50 && // Limit to 50 images per pattern
        images.hasOnly(['id', 'step', 'timestamp', 'url', 'thumbnailUrl', 'caption', 'type', 'metadata']);
    }
  }
}